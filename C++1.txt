2018/1/27  C++笔记整理
1.程序的编译过程：创建一个源文件（source file），由程序文本构成；编译器（complier）将源文件转化为
含有机器语言指令的目标文件（.o）,目标文件一起可以被链接器生成一个可以在系统中运行的可执行文件（.exe）。

2.库（library）是提前编写的能执行有用操作的工具的集合。调用时，系统库用尖括号<>表示，
如#include <iostream>，而其他典型库文件以.h后缀结尾，并用一对引号“”代替尖括号。

3.C++中，仅仅读取使用#include所包含的相应头文件还不足以访问系统库，为确保定义在一个大系统库中各部分
的程序元素名字（变量名，函数名）不会相互混淆，C++将代码段切分成不同的命名空间来跟踪结构体中名字
，C++标准库命名空间为std，"using namespace std;"

4.函数原型（prototype）使得在函数实际定义之前调用该函数成为可能，其实就是函数声明。
主要目的是确定函数类型和参数数量，以便编译器判断函数调用是否与函数定义兼容。

5.每个C++都要有一个main主函数，指定了程序计算的开始点，程序开始运行则main函数被调用，main函数
结束工作并返回时，程序执行随之结束。

6.main函数中参数argc和argv含义及用法 ：
argc是argument count的缩写，表示传入main函数参数的个数
argv是argument vector的缩写，表示传入main函数的参数序列或指针，并且第一个参数argv[0]是
程序的名称，并包含了程序所在的完整路径，所以我们需要输入main函数的参数个数应该是argc-1，
#include <iostream>  
using namespace std;  
void main(int argc,char *argv[])  
{  
    for(int i=0;i<argc;i++)  
    {  
        cout<<"argument["<<i<<"] is: "<<argv[i]<<endl;  
    }  
    system("pause");  
}  
main函数的第二个参数“char *argv[]“也可以替换为 “char **argv“，两者是等价的，
在没有参数传入的情况下，保存程序名称的第一个变量argv[0]依然存在。
传参数给main函数有两种方法，第一种方式是在编译环境中设置，以vs2012为例，右击项目—>属性—>配置属性—>调试—>命令参数，
在命令参数中输入，每个参数之间用空格隔开，之后点击确定并应用。
第二种方式也是经常会用到的方式是通过命令提示符传入。首先需要打开命令提示符窗口，点击开始菜单在“搜索程序和文件”里输入
命令“cmd”或者直接按快捷键 Windows+R，在弹出的对话框里输入“cmd”即可打开命令提示符窗口，打开命令提示符窗口后需要输入
生成的exe文件所在的完整路径，之后输入传入参数，以空格分隔，之后回车，就会显示出argument[k]，其中k从0开始。
最后说明一下：一般编译器默认使用argc和argv两个名称作为main函数的参数，但这两个参数如此命名并不是必须的，
可以使用任何符合C++语言命名规范的变量名作为入参，效果是一样的。

2018/2/24
1.很多专业场合，变量和函数的名字都是以小写字母开头，如limit和raiseToPower。类和其他编程者定义的数据类型的名字以大写字母
开头，如Direction和TokenScanner。常量名全部用大写字母表示，如PI和HALF_DOLLAR。虽然并不强制，但规范的约定可以使得代码可读
性提高。

2.全局变量和局部变量的一些说明：全局变量的作用域为它声明的那个文件，其生命周期为该程序的整个运行期，而局部变量的作用域可
以扩展到它所在的块的结束，函数调用时，为每个局部变量分配在整个函数周期调用时期的存储空间，函数返回时局部变量消亡。由此可
见，全局变量可以被程序中的任意函数操作，这很难避免函数间相互干扰（函数间的紧耦合）。

3.C++支持书写以反斜杠（\）开始的由多个字符表示的一种特殊字符，成为转义序列，如以下常见一些：
\a 警报
\b 退格
\f 进纸（从新一页开始）
\n 换行符
\r 回车符

4.关于字符串（string），第一点是：如果两个或两个以上字符串连续出现在程序中，编译器会自动将它们连起来，这条规则重要意义在于，
我们可以将一个字符串分行写而不用从左到右写一整行字符串。
第二点是：string是一个库类型，如果要在程序中使用，则需要#include <string>，当且仅当程序源文件开头包含using namespace std；
编译器才会识别string类型名。

5.多重赋值：n1=n2=n3=0，该赋值奏效是因为C++赋值操作符是从右往左进行的。与下语句等价：n1=(n2=(n3=0))；
嵌入赋值：z=(x=6)+(y=7)，作为较长表达式的一部分的赋值操作；
缩写赋值：将赋值操作符与二元操作符相结合，variable op= expression 等价于 variable =variable op (expression)
比如 balance +=deposit 等价于 balance = balance+deposit。

6.自增两种形式的区别：x++首先计算x的值，然后再自增x。x在自增前将其原始值返回给它临近的表达式。
++x首先x自增，然后把自增后的新值作为一个整体用。

7.注意switch语句中的控制表达式和互斥的条件值都是常量。switch语句尽可能在每个句子（case）后面添加break语句，以便跳出。但这也
有例外：当多个case语句表示多个不同常量时可连接出现，
case 1：
case 2：
    statements
    break；   即select表达式的值是1或2，则特定语句执行。

使用枚举类型的switch语句的例子，以下函数返回一个特定年月的总的天数：
int daysInMonth(Month month, int year){
    switch(month){
    case APRIL:
    case JUNE:
    case SEPTEMBER:
    case NOVEMBER:
     return 30;
    case FEBRUARY: 
     return (isLeapYear(year)) ? 29:28;
    default:
     return 31;
  }
}
bool isLeapYear(int year){
   return ((year % 4 == 0) && (year % 100 !=0))
        || (year % 400==0);
}  该函数编写了如何判断闰年：一个闰年是任何一个能被4整除，但不被100整除，或者能被400整除的年份。

8.关于循环语句，从用户那里读取数据知道遇到某个表示输入结束的特定数值称为信号量（sentinel）。可能会发生所谓循环和
一半问题（loop-and-a-half problem）的情况，可以采用的策略是使用break语句，立即结束最内层循环这种编程模式称为读直到
信号量模式（read-until-sentinel pattern）：
while （true）{
    #prompt user and read in a value.
    if (value == sentinel) break;
    #process the data value.
}   


2018/2/25
1.每当被程序包含的库在程序中发挥了作用时，计算机科学家便称该库导出了服务。

2.关于重载（overloading）：C++中，函数名相同但函数参数列表不同是合法的。当编译器遇到调用函数的函数名指代不唯一的
情况时，编译器会检查调用函数时所传实参并选用最合适的函数版本。几个使用相同名字而不同版本的函数称为函数名的重载。

3.为了实现函数调用，系统会创建一个栈帧来保持对函数定义的局部变量的跟踪。

4.当采用引用调用时，对应于引用形参的实参必须为可赋值的量，如变量名，而常数则不行。

5.接口与实现：
当定义一个C++库时，需要定义接口和具体实现，前者可让用户在不了解库实现细节的情况下使用库中函数，后者说明底层实现细节。
定义接口的文件后缀名 .h，实现的文件取同样的名字后缀为 .cpp。

6.const double PI=3.1415926；
在C++中，像这样定义的常量在源文件中是私有的常量，不能从接口中导出。为了可以导出，需要在其接口的常量定义声明和原型
声明中都加上关键字extern。

2018/2/27
1.关于string类，若使用输入输出流，可发现：
int main（）{
   string name；
   cout << "Enter your name: ";
   cin >> name;
   cout << "Hello, " << name << "!" << endl;
   return 0;
}
  当输入全名如Eric Roberts时，输出会是 Hello， Eric！
  而姓氏会不见，事实上这和>>操作符的字符串读取规则有关，一旦>>操作符遇到空白字符（whitespace character）就会停止读取，
此处空白字符定义为会在屏幕上显示空白间隔的字符，常见空白字符包括空格，制表符和行末标识符。
  若我们想读取一个包含空白字符的字符串，最标准的方法是用getline（cin， str），该函数从控制台读取一整行字符串并放到
str中，其中str是通过引用传递的。所以修缮后代码如下：
#include <iostream>
#include <string>
using namespace std;

int main(){
   string name;
   cout << "Enter your name: ";
   getline(cin, name);
   cout << "Hello, " << name << "!" << endl;
   return 0;
}


